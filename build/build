#!/usr/bin/env bash
#
# Build tomox-sdk-ui development container

readonly CURRENT_SCRIPT="$(basename -- ${BASH_SOURCE[0]})"
readonly CURRENT_DIRECTORY="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
readonly DOCKER_BINARY="$(command -v docker)"
readonly GITHUB_URL='https://github.com/tomochain/tomox-sdk-ui.git'

source "${CURRENT_DIRECTORY}/scripts/config.sh"
source "${CURRENT_DIRECTORY}/scripts/util.sh"

# usage: usage [printer]
usage() {
  local printer="$(arg_or_default "$1" 'print_raw')"

  "${printer}" "usage: ${CURRENT_SCRIPT} [-h] -c|--coinbase [COINBASE ADD] -a|--address [CONTRACT ADD]"
}

# usage: full_usage [printer]
full_usage() {
  local printer="$(arg_or_default "$1" 'print_raw')"

  usage "${printer}"
  "${printer}"
  "${printer}" 'Build tool for tomox-sdk-ui development container'
  "${printer}"
  "${printer}" 'arguments:'
  "${printer}" '  -h                    show this help message and exit'
  "${printer}" '  -c| --coinbase        the coin base address for relayer'
  "${printer}" '  -a| --address         the contract address for relayer'  
}


# usage: build_image [coinbase] [contract]
build_image() {
  # Clone the latest tomox-sdk-ui to current directory
  if ! [[ -d "${GITHUB_URL}" ]]; then
    echo "---------------------------"
    echo "First-time clone process..."
    echo "...Downloading from $GITHUB_URL"
    git clone -b features/dockerize ${GITHUB_URL}
    echo "Done git clone tomox-sdk-ui!"
    echo "----------------------------"
  fi 
  # Replace .env parameter
  # For Unix base
  sed -i "s/^COINBASE_ADDRESS=.*/COINBASE_ADDRESS=${COINBASE_ADDRESS}/g" tomox-sdk-ui/.env
  sed -i "s/^RELAYER_REGISTRATION_CONTRACT_ADDRESS=.*/RELAYER_REGISTRATION_CONTRACT_ADDRESS=${RELAYER_REGISTRATION_CONTRACT_ADDRESS}/g" tomox-sdk-ui/.env
  # Use for MacOS - you can `brew install gnu-sed` and then:
  # gsed -i "s/^COINBASE_ADDRESS=.*/COINBASE_ADDRESS=${COINBASE_ADDRESS}/g" tomox-sdk-ui/.env  
  # gsed -i "s/^RELAYER_REGISTRATION_CONTRACT_ADDRESS=.*/RELAYER_REGISTRATION_CONTRACT_ADDRESS=${RELAYER_REGISTRATION_CONTRACT_ADDRESS}/g" tomox-sdk-ui/.env

  # Copy addresses.json to project before build image
  cp -rf "${TOKEN_ADDRESS}" "${DOCKER_LOCAL_SOURCE_DIRECTORY}/src/config/addresses.json"
  
  # Generate image name
  local name="${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"

  print "building image ${name}"

  # Run docker with the provided arguments
  docker build -t "${name}" "${CURRENT_DIRECTORY}/${DOCKER_LOCAL_SOURCE_DIRECTORY}"

  # Clean
  rm -Rf tomox-sdk-ui
}

# usage: main [-h] [ARGS...]
main() {
  check_requirements "$@" || exit 1
  while :; do 
      case $1 in 
          -h|\?|--help)
              full_usage
              exit
              ;;
          -c|--coinbase)
              if [[ "$2" ]]; then
                  COINBASE_ADDRESS=$2
                  shift
              else
                  echo 'ERROR: "--coinbase" requires a non-empty option argument.'
                  exit
              fi
              ;;
          --coinbase=?*) # Delete everything up to "=" and assign the remainder.
              COINBASE_ADDRESS=${1#*=} 
              ;;
          --coinbase=)
              echo 'ERROR: "--coinbase" requires a non-empty option argument.'
              break
              ;;
          -a|--address)
              if [[ "$2" ]]; then
                  RELAYER_REGISTRATION_CONTRACT_ADDRESS=$2
                  shift
              else
                  echo 'ERROR: "--address" requires a non-empty option argument.'
                  exit
              fi
              ;;
          --address=?*) # Delete everything up to "=" and assign the remainder.
              COINBASE_ADDRESS=${1#*=} 
              ;;
          --address=)
              echo 'ERROR: "--address" requires a non-empty option argument.'
              break
              ;;
           -?*)
               printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
               exit 2
               ;;
           *)               # Default case: No more options, so break out of the loop.
               break
       esac
       shift
  done
 
  if [[ ${COINBASE_ADDRESS} && ${RELAYER_REGISTRATION_CONTRACT_ADDRESS} ]] ; then
    build_image "$@"
  else
    printf 'Program has at least 2 arguments.'
    exit
  fi
}

if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
  main "$@"
fi